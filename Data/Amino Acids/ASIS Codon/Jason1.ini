// Finite state machine definition

[delimiters]
// These are the delimiters which separate input tokens
// use the string <space> to represent a space character
// use the string <tab. to represent a tab character
// do not skip index numbers
// if this section is missing or does not begin with 0
//	then the delimiters are set to <space><tab>,-

0=<space>
1=<tab>
2=-
3=,

[input]
// input alphabet list 
0=n1
1=n2
2=a
3=b
4=n3


[output]
// output alphabet list
0=<space>
1=n1
2=n2
3=a
4=b
5=n3
// 6=no output
6=<no>

[states]
start = 0

// states names

0=start

// first input, need second input before outut is started
1=n1
2=n2
3=a
4=b
5=n3

// these states reflect the last 2 inputs

6=n1,n1
7=n1,n2
8=n1,a
9=n1,b
10=n1,n3

11=n2,n1
12=n2,n2
13=n2,a
14=n2,b
15=n2,n3

16=a,n1
17=a,n2
18=a,a
19=a,b
20=a,n3

21=b,n1
22=b,n2
23=b,a
24=b,b
25=b,n3

26=n3,n1
27=n3,n2
28=n3,a
29=n3,b
30=n3,n3

[next_state_rules]
// format CurrentState.input=NextState

// state 0 rules, get 1st base
0.0=1
0.1=2
0.2=3
0.3=4
0.4=5

// state 1 rules, n1 (1st base), get 2nd base
1.0=6
1.1=7
1.2=8
1.3=9
1.4=10

// state 2 rules, n2 (1st base), get 2nd base
2.0=11
2.1=12
2.2=13
2.3=14
2.4=15

// state 3 rules, a (1st base), get 2nd base
3.0=16
3.1=17
3.2=18
3.3=19
3.4=20

// state 4 rules, b (1st base), get 2nd base
4.0=21
4.1=22
4.2=23
4.3=24
4.4=25

// state 5 rules, n3 (1st base), get 2nd base
5.0=26
5.1=27
5.2=28
5.3=29
5.4=30

// state 6 rules, n1,n1
6.0=0
6.1=0
6.2=0
6.3=0
6.4=0

// state 7 rules, n1,n2
7.0=0
7.1=0
7.2=0
7.3=0
7.4=0

// state 8 rules, n1,a
8.0=0
8.1=0
8.2=0
8.3=0
8.4=0

// state 9 rules, n1,b
9.0=0
9.1=0
9.2=0
9.3=0
9.4=0

// state 10 rules, n1,n3
10.0=0
10.1=0
10.2=0
10.3=0
10.4=0

// state 11 rules, n2,n1
11.0=0
11.1=0
11.2=0
11.3=0
11.4=0

// state 12 rules, n2,n2
12.0=0
12.1=0
12.2=0
12.3=0
12.4=0

// state 13 rules, n2,a
13.0=0
13.1=0
13.2=0
13.3=0
13.4=0

// state 14 rules, n2,b
14.0=0
14.1=0
14.2=0
14.3=0
14.4=0

// state 15 rules, n2,n3
15.0=0
15.1=0
15.2=0
15.3=0
15.4=0

// state 16 rules, a,n1
16.0=0
16.1=0
16.2=0
16.3=0
16.4=0

// state 17 rules, a,n2
17.0=0
17.1=0
17.2=0
17.3=0
17.4=0

// state 18 rules, a,a
18.0=0
18.1=0
18.2=0
18.3=0
18.4=0

// state 19 rules, a,b
19.0=0
19.1=0
19.2=0
19.3=0
19.4=0

// state 20 rules, a,n3
20.0=0
20.1=0
20.2=0
20.3=0
20.4=0

// state 21 rules, b,n1
21.0=0
21.1=0
21.2=0
21.3=0
21.4=0

// state 22 rules, b,n2
22.0=0
22.1=0
22.2=0
22.3=0
22.4=0

// state 23 rules, b,a
23.0=0
23.1=0
23.2=0
23.3=0
23.4=0

// state 24 rules, b,b
24.0=0
24.1=0
24.2=0
24.3=0
24.4=0

// state 25 rules, b,n3
25.0=0
25.1=0
25.2=0
25.3=0
25.4=0

// state 26 rules, n3,n1
26.0=0
26.1=0
26.2=0
26.3=0
26.4=0

// state 27 rules, n3,n2
27.0=0
27.1=0
27.2=0
27.3=0
27.4=0

// state 28 rules, n3,a
28.0=0
28.1=0
28.2=0
28.3=0
28.4=0

// state 29 rules, n3,b
29.0=0
29.1=0
29.2=0
29.3=0
29.4=0

// state 30 rules, n3,n3
30.0=0
30.1=0
30.2=0
30.3=0
30.4=0


[output_rules]
// format CurrentState.Input=Output

// output 0 rules, no output <no>
0.0=6
0.1=6
0.2=6
0.3=6
0.4=6

// output 1 rules, n1
1.0=0
1.1=0
1.2=0
1.3=0
1.4=0

// output 2 rules, n2
2.0=0
2.1=0
2.2=0
2.3=0
2.4=0

// output 3 rules, a
3.0=0
3.1=0
3.2=0
3.3=0
3.4=0

// output 4 rules, b
4.0=0
4.1=0
4.2=0
4.3=0
4.4=0

// output 5 rules, n3
5.0=0
5.1=0
5.2=0
5.3=0
5.4=0

// output 6 rules, n1,n1
6.0=1
6.1=4
6.2=1
6.3=1
6.4=3

// output 7 rules, n1,n2
7.0=4
7.1=4
7.2=5
7.3=4
7.4=4

// output 8 rules, n1,a
8.0=3
8.1=5
8.2=3
8.3=1
8.4=3

// output 9 rules, n1,b
9.0=4
9.1=4
9.2=1
9.3=4
9.4=2

// output 10 rules, n1,n3
10.0=3
10.1=3
10.2=3
10.3=2
10.4=3

// output 11 rules, n2,n1
11.0=4
11.1=4
11.2=4
11.3=4
11.4=4

// output 12 rules, n2,n2
12.0=4
12.1=2
12.2=5
12.3=2
12.4=2

// output 13 rules, n2,a
13.0=5
13.1=5
13.2=5
13.3=5
13.4=5

// output 14 rules, n2,b
14.0=4
14.1=4
14.2=1
14.3=4
14.4=2

// output 15 rules, n2,n3
15.0=3
15.1=5
15.2=5
15.3=2
15.4=5

// output 16 rules, a,n1
16.0=1
16.1=4
16.2=1
16.3=1
16.4=3

// output 17 rules, a,n2
17.0=5
17.1=5
17.2=5
17.3=5
17.4=5

// output 18 rules, a,a
18.0=3
18.1=5
18.2=3
18.3=1
18.4=3

// output 19 rules, a,b
19.0=1
19.1=1
19.2=1
19.3=1
19.4=1

// output 20 rules, a,n3
20.0=3
20.1=5
20.2=5
20.3=2
20.4=5

// output 21 rules, b,n1
21.0=1
21.1=4
21.2=1
21.3=1
21.4=3

// output 22 rules, b,n2
22.0=4
22.1=2
22.2=5
22.3=2
22.4=2

// output 23 rules, b,a
23.0=1
23.1=5
23.2=1
23.3=1
23.4=1

// output 24 rules, b,b
24.0=4
24.1=4
24.2=1
24.3=4
24.4=2

// output 25 rules, b,n3
25.0=2
25.1=2
25.2=2
25.3=2
25.4=2

// output 26 rules, n3,n1
26.0=3
26.1=4
26.2=3
26.3=3
26.4=3

// output 27 rules, n3,n2
27.0=4
27.1=2
27.2=5
27.3=2
27.4=2

// output 28 rules, n3,a
28.0=2
28.1=5
28.2=2
28.3=1
28.4=2

// output 29 rules, n3,b
29.0=2
29.1=2
29.2=1
29.3=2
29.4=2

// output 30 rules, n3,n3
30.0=3
30.1=5
30.2=5
30.3=2
30.4=5
